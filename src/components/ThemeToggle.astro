---
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<button 
  id="theme-toggle"
  class={`theme-toggle ${className}`}
  aria-label="Toggle dark mode"
  type="button"
>
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px;
    border-radius: var(--radius-sm);
    background-color: var(--color-surface);
    color: var(--color-text-secondary);
    transition: all 0.2s ease;
    width: 36px;
    height: 36px;
  }

  .theme-toggle:hover {
    background-color: var(--color-border);
    color: var(--color-text);
  }

  .sun-icon,
  .moon-icon {
    transition: all 0.3s ease;
  }

  .sun-icon {
    display: block;
  }

  .moon-icon {
    display: none;
  }

  [data-theme="dark"] .sun-icon {
    display: none;
  }

  [data-theme="dark"] .moon-icon {
    display: block;
  }
</style>

<script>
  class ThemeToggle {
    private button: HTMLButtonElement;
    private html: HTMLElement;

    constructor() {
      this.button = document.getElementById('theme-toggle') as HTMLButtonElement;
      this.html = document.documentElement;
      
      if (!this.button) return;
      
      this.init();
    }

    private init(): void {
      this.button.addEventListener('click', this.toggleTheme.bind(this));
    }

    private toggleTheme(): void {
      const currentTheme = this.html.getAttribute('data-theme') || 'light';
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      this.html.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('themechange', { detail: { theme: newTheme } }));
    }
  }

  // Initialize when DOM is ready
  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => new ThemeToggle());
    } else {
      new ThemeToggle();
    }
  }
</script>